# vue에서 history mode를 사용할 때, apache httpd 서버 설정
# Vue.js 애플리케이션은 기본적으로 HTML5 History Mode를 사용하여 라우팅을 처리함. 이 모드는 URL의 해시(#)를 제거하여 일반 URL처럼 보이게 만듬.
# 그러나 이 모드를 사용하면 URL을 직접 입력하거나 새로 고침할 때 404 오류가 발생할 수 있음. 이는 서버가 클라이언트 측 애플리케이션에 정의된 경로를 인식하지 못하기 때문.
# Apache HTTP 서버의 mod_rewrite 모듈을 사용하면 이 문제를 해결할 수 있음. mod_rewrite는 요청된 URL을 다른 URL로 리다이렉트하거나, 내부적으로 변경하는 등의 작업을 수행
# mod_rewrite를 사용하여 모든 404 요청을 index.html로 리다이렉트

# mod_rewrite 모듈을 사용
LoadModule rewrite_module modules/mod_rewrite.so

DocumentRoot "/usr/local/apache2/htdocs"
<Directory "/usr/local/apache2/htdocs">
    #
    # Possible values for the Options directive are "None", "All",
    # or any combination of:
    #   Indexes Includes FollowSymLinks SymLinksifOwnerMatch ExecCGI MultiViews
    #
    # Note that "MultiViews" must be named *explicitly* --- "Options All"
    # doesn't give it to you.
    #
    # The Options directive is both complicated and important.  Please see
    # http://httpd.apache.org/docs/2.4/mod/core.html#options
    # for more information.
    #
    Options Indexes FollowSymLinks

    #
    # AllowOverride controls what directives may be placed in .htaccess files.
    # It can be "All", "None", or any combination of the keywords:
    #   AllowOverride FileInfo AuthConfig Limit
    #
    AllowOverride None

    #
    # Controls who can get stuff from this server.
    #
    Require all granted

    # RewriteEngine 설정
    <IfModule mod_rewrite.c>
        RewriteEngine On # mod_rewrite 활성화
        RewriteBase /spa # 모든 rewrite 규칙의 기준이 될 URL 경로를 설정
        RewriteRule ^index\.html$ - [L] # index.html 요청은 그대로 처리
        RewriteCond %{REQUEST_FILENAME} !-f # 요청된 파일이 실제로 존재하지 않는 경우에만 다음 RewriteRule을 적용
        RewriteCond %{REQUEST_FILENAME} !-d # 요청된 경로가 실제 디렉토리가 아닌 경우에만 다음 RewriteRule을 적용
        RewriteRule . /spa/index.html [L] # 위의 두 RewriteCond 조건이 모두 참인 경우, 즉 요청된 파일이나 디렉토리가 실제로 존재하지 않는 경우, 요청을 index.html로 리다이렉트
    </IfModule>
</Directory>